// TCS230 or TCS3200 pins wiring to Arduino
#define S0 12
#define S1 13
#define S2 11
#define S3 10
#define sensorOut 8

// Motor control pins
#define leftMotorPin1 4
#define leftMotorPin2 5
#define rightMotorPin1 6
#define rightMotorPin2 7

// Stores frequency read by the photodiodes
int redFrequency = 0;
int greenFrequency = 0;
int blueFrequency = 0;

// Thresholds for color detection
const int blackThreshold = 1000;
const int whiteThreshold = 500;

void setup() {
  // Setting the outputs
  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
  pinMode(S3, OUTPUT);
  
  // Setting the sensorOut as an input
  pinMode(sensorOut, INPUT);
  
  // Motor control pins as outputs
  pinMode(leftMotorPin1, OUTPUT);
  pinMode(leftMotorPin2, OUTPUT);
  pinMode(rightMotorPin1, OUTPUT);
  pinMode(rightMotorPin2, OUTPUT);
  
  // Setting frequency scaling to 20%
  digitalWrite(S0, HIGH);
  digitalWrite(S1, LOW);
  
  // Begins serial communication 
  Serial.begin(9600);
  
  // Wait a moment for serial connection to initialize
  delay(1000);
}

void loop() {
  // Read color frequencies
  readColorFrequencies();
  
  // Output color signals to the serial monitor
  Serial.print("R = ");
  Serial.print(redFrequency);
  Serial.print(" | G = ");
  Serial.print(greenFrequency);
  Serial.print(" | B = ");
  Serial.println(blueFrequency);
  
  // Line-following logic
  if (redFrequency < blackThreshold && greenFrequency < blackThreshold && blueFrequency < blackThreshold) {
    // Black surface detected, go straight
    goStraight();
  } else {
    // White surface detected, adjust direction
    if (redFrequency > whiteThreshold) {
      // Turn right
      turnRight();
    } else if (blueFrequency > whiteThreshold) {
      // Turn left
      turnLeft();
    } else {
      // Go straight as default
      goStraight();
    }
  }
}

void readColorFrequencies() {
  digitalWrite(S2, LOW);
  digitalWrite(S3, LOW);
  redFrequency = pulseIn(sensorOut, LOW);
  
  digitalWrite(S2, HIGH);
  digitalWrite(S3, HIGH);
  greenFrequency = pulseIn(sensorOut, LOW);
  
  digitalWrite(S2, LOW);
  digitalWrite(S3, HIGH);
  blueFrequency = pulseIn(sensorOut, LOW);
}

void goStraight() {
  analogWrite(leftMotorPin1, 170);  // Adjust PWM value for slower movement
  digitalWrite(leftMotorPin2, LOW);
  analogWrite(rightMotorPin1, 170);  // Adjust PWM value for slower movement
  digitalWrite(rightMotorPin2, LOW);
}

void turnLeft() {
  digitalWrite(leftMotorPin1, LOW);
  analogWrite(leftMotorPin2, 180);  // Adjust PWM value for slower turning
  analogWrite(rightMotorPin1, 180);  // Adjust PWM value for slower turning
  digitalWrite(rightMotorPin2, LOW);
}

void turnRight() {
  analogWrite(leftMotorPin1, 180);  // Adjust PWM value for slower turning
  digitalWrite(leftMotorPin2, LOW);
  digitalWrite(rightMotorPin1, LOW);
  analogWrite(rightMotorPin2, 180);  // Adjust PWM value for slower turning
}
