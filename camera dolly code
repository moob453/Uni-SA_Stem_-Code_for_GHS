   
   // Created by Lachlan Becker
   // Grade 8
   // Commonly known online as moob453  
   // Made for the Uni SA Stemia camera dolly
   // Purpose is to make a robot follow a black line
   // Must be used on a white or bright envoirment
   // 
   
   // Pins for the color sensor
#define S0 12
#define S1 13
#define S2 11
#define S3 10
#define sensorOut 8

// Motor control pins
#define leftMotorPin 4
#define rightMotorPin 5

// Calibration thresholds
const int redThreshold = 100;    // Adjust these values based on calibration
const int greenThreshold = 100;  // Adjust these values based on calibration
const int blueThreshold = 100;   // Adjust these values based on calibration

// Motor control speed
const int motorSpeed = 500000;  // Adjust this value to control motor speed(bigger means slower)
const int turnDelay = 0;   // Delay for turn action

void setup() {
  // Setting the outputs
  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
  pinMode(S3, OUTPUT);
  
  // Setting the sensorOut as an input
  pinMode(sensorOut, INPUT);
  
  // Motor control pins as outputs
  pinMode(leftMotorPin, OUTPUT);
  pinMode(rightMotorPin, OUTPUT);
  
  // Setting frequency scaling to 20%
  digitalWrite(S0, HIGH);
  digitalWrite(S1, LOW);
  
  // Begins serial communication 
  Serial.begin(9600);
}

void loop() {
  int redFrequency = readFrequency(S2, S3);
  int greenFrequency = readFrequency(S2, S3);
  int blueFrequency = readFrequency(S2, S3);

  if (redFrequency > redThreshold && greenFrequency > greenThreshold && blueFrequency > blueThreshold) {
    // Black surface detected
    Serial.println("Color: Black");
    turnLeft();
    delay(turnDelay);
  } else if (redFrequency < redThreshold && greenFrequency < greenThreshold && blueFrequency < blueThreshold) {
    // White surface detected
    Serial.println("Color: White");
    goStraight();
    delay();
  } else {
    // Gray area
    Serial.println("Color: Gray");
    goStraight();
  }
}

int readFrequency(int s2Pin, int s3Pin) {
  digitalWrite(s2Pin, LOW);
  digitalWrite(s3Pin, LOW);
  int frequency = pulseIn(sensorOut, LOW);
  return frequency;
}

void goStraight() {
  digitalWrite(leftMotorPin, HIGH);
  delay(1);
  digitalWrite(leftMotorPin, LOW);
  delay(1);
  digitalWrite(rightMotorPin, HIGH);
  delay(1);
  digitalWrite(rightMotorPin, LOW);
  delay(1);
}

void turnLeft() {
  digitalWrite(leftMotorPin, HIGH);
  digitalWrite(rightMotorPin, LOW);
  
}

// Add turnRight() and stopMotors() functions as well
